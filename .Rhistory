source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples-v6.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples-v6.R", echo=TRUE)
View(df)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples-v6.R", echo=TRUE)
View(headerStyle)
# comando:
df = gbcbd_get_series(
# Id of time series. The name of the vector sets the name of the series in the output (e.g i.d <- c('SELIC' = 11)). You can search for ids in the official BCB-SGS webpage <http://www.bcb.gov.br/?sgs>
id = ids_bacen,
# First date of time series
first.date = data_ini,
# Last date of time series
last.date = Sys.Date(),
# The format of the datasets - long (default, series incremented by rows) or wide (series incremented by columns)
# format.data	= wide
# Logical. Should functions output messages to screen? - FALSE (default) or TRUE
# be.quiet
# Logical. Sets the use of caching system - TRUE (default) or FALSE
# use.memoise
# Path to save cache files - 'rbcb2_cache' (default)
# cache.path
# Logical for parallel data importation - FALSE (default)
# do.parallel
)
# comando:
df = gbcbd_get_series(
# Id of time series. The name of the vector sets the name of the series in the output (e.g i.d <- c('SELIC' = 11)). You can search for ids in the official BCB-SGS webpage <http://www.bcb.gov.br/?sgs>
id = ids_bacen,
# First date of time series
first.date = data_ini,
# Last date of time series
last.date = Sys.Date()
# The format of the datasets - long (default, series incremented by rows) or wide (series incremented by columns)
# format.data	= wide
# Logical. Should functions output messages to screen? - FALSE (default) or TRUE
# be.quiet
# Logical. Sets the use of caching system - TRUE (default) or FALSE
# use.memoise
# Path to save cache files - 'rbcb2_cache' (default)
# cache.path
# Logical for parallel data importation - FALSE (default)
# do.parallel
)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_github/datasets/bacen/scripts/102_bacen_ETL_v01_download_simples-v6.R", echo=TRUE)
gbcbd_get_series(id = 28183)
gbcbd_get_series(id = 28183, first.date = Sys.Date()-365, last.date = Sys.Date())
gbcbd_get_series(id = 28183, first.date = Sys.Date()-365, last.date = Sys.Date())
gbcbd_get_series(id = 28183, first.date = format(Sys.Date()-365, "%Y/%m/%d"), last.date = Sys.Date())
format(Sys.Date()-365, "%Y/%m/%d")
gbcbd_get_series(id = 28183, first.date = format(Sys.Date()-365, "%Y/%m/%d"), last.date = format(Sys.Date(), "%Y/%m/%d"))
gbcbd_get_series(id = 28183, first.date = format(Sys.Date()-365, "%Y/%m/%d"), last.date = format(Sys.Date(), "%Y/%m/%d"))
ipca_br_url <- bacen_url(433, '01/01/2003', '31/12/2023')
library(BacenAPI)
install.packages(BacenAPI)
install.packages("BacenAPI")
install_and_load_packages <- function(...) {
# Capture the arguments as a character vector
packages <- c(...)
# Check if all inputs are strings
if (!all(sapply(packages, is.character))) {
stop("All input arguments must be strings representing package names.")
}
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
}
install_and_load_packages("BacenAPI")
library(BacenAPI)
ipca_br_url <- bacen_url(433, '01/01/2003', '31/12/2023')
print(ipca_br_url)
bacen_api(url = ipca_br_url, httr = TRUE)
View(df)
View(df)
