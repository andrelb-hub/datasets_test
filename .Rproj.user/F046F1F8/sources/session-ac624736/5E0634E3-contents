# CLEAR ENVIRONMENT ############################################################

# Remove all objects from the environment
rm(list = ls())

# Run garbage collection
gc()

# INSTALL AND LOAD PACKAGES ####################################################

packages = c(
  'beepr', 
  'furrr', 
  'future', 
  'GetBCBData', 
  'lubridate', 
  'purrr',
  'ragg',
  'rbcb', 
  'readxl', 
  'tibble', 
  'tidyverse', 
  'writexl')

for (pkg in packages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg, method = "wininet")
  } 
  library(pkg, character.only = TRUE)
}

# TIME CONTROL #################################################################

# Record the start time
start_time <- Sys.time()

# PARAMETERS ###################################################################

tema = "Setor Externo"

file_name = "setor_externo"

output_folder = "lake/"

data_ini = '1995-01-01'

# LIBRARY ######################################################################

# # Carregar glossário:
# library_bacen_PT = read_xlsx("library/library_bacen_PT.xlsx", sheet = "library")
# 
# # Converter as colunas 'Início' para data
# library_bacen_PT <- library_bacen_PT %>%
#   mutate(across(c(`Início`), as.Date))
# 
# # Filtrar, selecionar 'Código' das séries, e ordenar em ordem crescente:
# ids_bacen = library_bacen_PT %>%
#   filter(Tema %in% tema) %>%
#   select("Código") %>%
#   arrange(Código) %>%  # Ordenar em ordem crescente
#   pull()

# IDS BACEN ####################################################################

ids_bacen = c(
  
  # MENSAIS:
  22701,22702,
                             22703,23079,
                             24419,22885,
                             22886,22887,
                             22704,22705,
                             22706,22707,
                             22710,22711,
                             22712,22713,
                             22716,22719,
                             22800,22838,23080,24422,
              
              # TRIMESTRAIS:
              23081,23082,
                     23083,23459,
                     24420,23265,
                     23266,23267,
                     23084,23085,
                     23086,23087,
                     23090,
  
  # ANUAIS: 
  23461,23462,
                23463,23464,
                23465,23466,
                23467,23470,
                23839,24421,
                23645,23646,
                23647)

# FUNCTION TO DOWNLOAD DATA ####################################################

# Define the function to download data
download_data <- function(id, max_attempts = 5) {
  attempt <- 1
  success <- FALSE
  result <- NULL
  
  while(attempt <= max_attempts && !success) {
    tryCatch(
      {
        df <- gbcbd_get_series(
          id = id,
          first.date = data_ini,
          last.date  = Sys.Date()
        )
        # Check if the data frame is empty
        if (nrow(df) == 1) {
          stop("Data frame is empty")
        }
        success <- TRUE
        result <- df
      },
      error = function(e) {
        message(paste("Failed to download data for id", id, "- attempt", attempt, "of", max_attempts))
        Sys.sleep(2)  # wait for n seconds before retrying
        attempt <- attempt + 1
      },
      warning = function(w) {
        message(paste("Warning for id", id, ":", conditionMessage(w)))
        attempt <- attempt + 1
      }
    )
  }
  
  if (!success) {
    message(paste("Failed to download data for id", id, "after", max_attempts, "attempts"))
    return(NULL)
  }
  
  return(result)
}

# LOOP TO DOWNLOAD #############################################################

# Initialize an empty list to store the results
all_data <- list()

# Get the total number of IDs
total_ids <- length(ids_bacen)
downloaded_ids <- 0  # Counter for downloaded IDs

################################################################################

# # Loop over the IDs and download the data
# for (id in ids_bacen) {
#   result <- download_data(id)
#   if (!is.null(result)) {
#     all_data[[as.character(id)]] <- result
#     downloaded_ids <- downloaded_ids + 1
#   }
#   # Calculate the percentage of completion
#   percentage_complete <- (downloaded_ids / total_ids) * 100
#   message(sprintf("Downloaded %d out of %d (%.2f%%) IDs", downloaded_ids, total_ids, percentage_complete))
# }

# Load required libraries
library(purrr)
library(dplyr)

# Function to download data for a given ID and print progress
download_result <- function(id, total_ids) {
  result <- download_data(id)
  if (!is.null(result)) {
    downloaded_ids <<- downloaded_ids + 1
    percentage_complete <- (downloaded_ids / total_ids) * 100
    message(sprintf("Downloaded %d out of %d (%.2f%%) IDs", downloaded_ids, total_ids, percentage_complete))
    list(id = id, result = result)
  } else {
    NULL
  }
}

# Initialize counters
downloaded_ids <- 0
total_ids <- length(ids_bacen)

# Use purrr::map to download data for all IDs with progress messages
results <- map(ids_bacen, ~ download_result(.x, total_ids))

# Filter out NULL results and create a named list of results
all_data <- map(results, "result") %>%
  set_names(map_chr(results, "id"))


################################################################################

# Combine the results into a single data frame
final_df <- bind_rows(all_data)
df = final_df

# Delete column:
df$series.name = NULL

# Rename colnames:
df <- df %>%
  rename(
    data = ref.date,
    `Código` = id.num,
    valor = value
  )

# Spread the dataframe:
df <- df %>%
  spread(key = `Código`, value = valor)

# Sort the dataframe by the data column:
df <- df %>%
  arrange(data)

# SAVE THE FILES ###############################################################

# Assuming 'df' is your dataframe
write_xlsx(df, paste0(output_folder, file_name, ".xlsx"))

# CREATE THE FILES #############################################################

# library = library_bacen_PT %>% filter(`Código` %in% ids_bacen)
# 
# codigos = library$Código
# 
# # Find values in ids_bacen that are not in codigos
# missing_values <- setdiff(ids_bacen, codigos)
# 
# # Print the missing values
# print(missing_values)


# TIME CONTROL #################################################################

# Record the end time:
end_time <- Sys.time()

# Calculate the duration:
duration <- end_time - start_time

# Extract hours, minutes, and seconds:
hours <- as.numeric(duration, units = "hours") %/% 1
minutes <- as.numeric(duration, units = "mins") %/% 1 %% 60
seconds <- as.numeric(duration, units = "secs") %/% 1 %% 60

# Format the duration as hh:mm:ss:
duration <- sprintf("%02d:%02d:%02d", hours, minutes, seconds)

# TEMPO DE EXECUÇÃO:
print(duration)

# BEEP #########################################################################

beep(sound = "coin")

# END ##########################################################################